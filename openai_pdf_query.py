# -*- coding: utf-8 -*-
"""OPENAI PDF QUERY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/144STuhSIkGfLJOsJ0Z2_su8xcx5sjTc_
"""

import requests
from bs4 import BeautifulSoup
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
import os

# Set the OpenAI API key
os.environ["OPENAI_API_KEY"] = "your_openai_api_key"

def answer_question(url, question):
    # Fetch the page
    res = requests.get(url)
    res.raise_for_status()  # This will raise an exception for HTTP errors

    # Use BeautifulSoup to extract text from HTML
    soup = BeautifulSoup(res.text, 'html.parser')
    raw_text = ' '.join(p.text for p in soup.find_all('p'))

    # Split the text into chunks
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=300,
        length_function=len
    )
    texts = text_splitter.split_text(raw_text)

    # Generate embeddings for the texts
    embeddings = OpenAIEmbeddings()
    document_search = FAISS.from_texts(texts, embeddings)

    # Load the QA chain
    chain = load_qa_chain(OpenAI(), chain_type="qa")

    # Search for the most relevant documents
    docs = document_search.similarity_search(question)

    # Run the chain to answer the question based on the documents
    answers = chain.run(input_documents=docs, question=question)

    # Return the answers
    return answers

# Example usage:
#url = "https://en.wikipedia.org/wiki/Generative_artificial_intelligence"
#question = "What are the concerns around Generative AI?"
url = input("Enter the URL for searching : ")
question = input("Enter the question to be asked from webpage :  ")
answer = answer_question(url, question)
print(answer)